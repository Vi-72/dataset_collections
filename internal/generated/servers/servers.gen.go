// Package servers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package servers

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for ImportJobStatusStatus.
const (
	ImportJobStatusStatusCompleted  ImportJobStatusStatus = "completed"
	ImportJobStatusStatusFailed     ImportJobStatusStatus = "failed"
	ImportJobStatusStatusInProgress ImportJobStatusStatus = "in_progress"
	ImportJobStatusStatusPending    ImportJobStatusStatus = "pending"
)

// Defines values for ImportResultStatus.
const (
	ImportResultStatusCompleted  ImportResultStatus = "completed"
	ImportResultStatusFailed     ImportResultStatus = "failed"
	ImportResultStatusInProgress ImportResultStatus = "in_progress"
	ImportResultStatusPending    ImportResultStatus = "pending"
)

// ImportJobStatus defines model for ImportJobStatus.
type ImportJobStatus struct {
	// DurationMs Время выполнения в миллисекундах
	DurationMs *int `json:"duration_ms,omitempty"`

	// Error Сообщение об ошибке (если есть)
	Error *string `json:"error,omitempty"`

	// FailedRows Количество строк с ошибками
	FailedRows *int `json:"failed_rows,omitempty"`

	// FinishedAt Время завершения задачи (если завершена)
	FinishedAt *time.Time `json:"finished_at,omitempty"`

	// JobId ID задачи импорта
	JobId string `json:"job_id"`

	// SavedRows Количество сохраненных строк
	SavedRows *int `json:"saved_rows,omitempty"`

	// StartedAt Время начала задачи
	StartedAt time.Time `json:"started_at"`

	// Status Статус задачи импорта
	Status ImportJobStatusStatus `json:"status"`

	// TotalRows Общее количество обработанных строк
	TotalRows *int `json:"total_rows,omitempty"`
}

// ImportJobStatusStatus Статус задачи импорта
type ImportJobStatusStatus string

// ImportResult defines model for ImportResult.
type ImportResult struct {
	// JobId ID созданной задачи импорта
	JobId string `json:"job_id"`

	// Status Статус задачи импорта
	Status ImportResultStatus `json:"status"`
}

// ImportResultStatus Статус задачи импорта
type ImportResultStatus string

// PopulationEntry defines model for PopulationEntry.
type PopulationEntry struct {
	CountryCode string `json:"country_code"`
	CountryName string `json:"country_name"`
	Population  int    `json:"population"`
	Year        int    `json:"year"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Запуск импорта данных о населении
	// (POST /api/v1/import)
	StartImport(w http.ResponseWriter, r *http.Request)
	// Получить статус задачи импорта по ID
	// (GET /api/v1/import/{job_id})
	GetImportJobStatus(w http.ResponseWriter, r *http.Request, jobId string)
	// Получить данные о населении по коду страны
	// (GET /api/v1/population/{country_code})
	GetPopulationByCountry(w http.ResponseWriter, r *http.Request, countryCode string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Запуск импорта данных о населении
// (POST /api/v1/import)
func (_ Unimplemented) StartImport(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить статус задачи импорта по ID
// (GET /api/v1/import/{job_id})
func (_ Unimplemented) GetImportJobStatus(w http.ResponseWriter, r *http.Request, jobId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить данные о населении по коду страны
// (GET /api/v1/population/{country_code})
func (_ Unimplemented) GetPopulationByCountry(w http.ResponseWriter, r *http.Request, countryCode string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// StartImport operation middleware
func (siw *ServerInterfaceWrapper) StartImport(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StartImport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetImportJobStatus operation middleware
func (siw *ServerInterfaceWrapper) GetImportJobStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", chi.URLParam(r, "job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetImportJobStatus(w, r, jobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPopulationByCountry operation middleware
func (siw *ServerInterfaceWrapper) GetPopulationByCountry(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", chi.URLParam(r, "country_code"), &countryCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "country_code", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPopulationByCountry(w, r, countryCode)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/import", wrapper.StartImport)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/import/{job_id}", wrapper.GetImportJobStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/population/{country_code}", wrapper.GetPopulationByCountry)
	})

	return r
}

type StartImportRequestObject struct {
}

type StartImportResponseObject interface {
	VisitStartImportResponse(w http.ResponseWriter) error
}

type StartImport202JSONResponse ImportResult

func (response StartImport202JSONResponse) VisitStartImportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type StartImport500Response struct {
}

func (response StartImport500Response) VisitStartImportResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetImportJobStatusRequestObject struct {
	JobId string `json:"job_id"`
}

type GetImportJobStatusResponseObject interface {
	VisitGetImportJobStatusResponse(w http.ResponseWriter) error
}

type GetImportJobStatus200JSONResponse ImportJobStatus

func (response GetImportJobStatus200JSONResponse) VisitGetImportJobStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetImportJobStatus404Response struct {
}

func (response GetImportJobStatus404Response) VisitGetImportJobStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetImportJobStatus500Response struct {
}

func (response GetImportJobStatus500Response) VisitGetImportJobStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetPopulationByCountryRequestObject struct {
	CountryCode string `json:"country_code"`
}

type GetPopulationByCountryResponseObject interface {
	VisitGetPopulationByCountryResponse(w http.ResponseWriter) error
}

type GetPopulationByCountry200JSONResponse []PopulationEntry

func (response GetPopulationByCountry200JSONResponse) VisitGetPopulationByCountryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPopulationByCountry404Response struct {
}

func (response GetPopulationByCountry404Response) VisitGetPopulationByCountryResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetPopulationByCountry500Response struct {
}

func (response GetPopulationByCountry500Response) VisitGetPopulationByCountryResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Запуск импорта данных о населении
	// (POST /api/v1/import)
	StartImport(ctx context.Context, request StartImportRequestObject) (StartImportResponseObject, error)
	// Получить статус задачи импорта по ID
	// (GET /api/v1/import/{job_id})
	GetImportJobStatus(ctx context.Context, request GetImportJobStatusRequestObject) (GetImportJobStatusResponseObject, error)
	// Получить данные о населении по коду страны
	// (GET /api/v1/population/{country_code})
	GetPopulationByCountry(ctx context.Context, request GetPopulationByCountryRequestObject) (GetPopulationByCountryResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// StartImport operation middleware
func (sh *strictHandler) StartImport(w http.ResponseWriter, r *http.Request) {
	var request StartImportRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StartImport(ctx, request.(StartImportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StartImport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StartImportResponseObject); ok {
		if err := validResponse.VisitStartImportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetImportJobStatus operation middleware
func (sh *strictHandler) GetImportJobStatus(w http.ResponseWriter, r *http.Request, jobId string) {
	var request GetImportJobStatusRequestObject

	request.JobId = jobId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetImportJobStatus(ctx, request.(GetImportJobStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetImportJobStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetImportJobStatusResponseObject); ok {
		if err := validResponse.VisitGetImportJobStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPopulationByCountry operation middleware
func (sh *strictHandler) GetPopulationByCountry(w http.ResponseWriter, r *http.Request, countryCode string) {
	var request GetPopulationByCountryRequestObject

	request.CountryCode = countryCode

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPopulationByCountry(ctx, request.(GetPopulationByCountryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPopulationByCountry")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPopulationByCountryResponseObject); ok {
		if err := validResponse.VisitGetPopulationByCountryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX32obRxd/lWW+7yIB2SvHaQh71zalqDcN9WUwYiyNrTG7O9uZWRdjBLKFSYpLQ0sh",
	"pRct7ROsjZcokiW/wpk3KmdG0mqljSNDG3ol7ezOnPP7c87ZPSEtESUiZrFWJDghqtVhEbV/G1EipP5K",
	"7O1oqlO7lEiRMKk5s1ftVFLNRdyM3CVTLckTXCEBgZ9ND3K4Ma89uDIXcAsTGMEYchjDwC56cAMDGMEI",
	"BuYUchiaPozhGjJzTmpEHyeMBITHmh0wSbo1wqQUsiLQnzCBCVya793ZkHt46cHEvIIBXMIQcu8B5OYU",
	"I3n4x5yZHx4WMZSWPD7AEPuUh6zdlOK7KkS/WQgD89KdAVcw8exhPZjA0DOnizEzRFeJY5/HXHVYu0n1",
	"3bS9hQyuIDc986qgDReRo5cwWES1/GyG+PaFjDAIaVPNNjSPWBXoQ7HX5O3VVBrPytFgADcoo+mZM8iq",
	"TlL06L7swcScmx5kU2eMzYU5XyC1kkClqdRr8De2iWcwgqyEZG1m1Nz4y5ZDBsyZ6aPmd3LE4jQiwQuS",
	"sLiNp9YIj5uJFAeSKUVqtvpCplmbzNxHdisy0ULT8H3M/j41f+7BsIJkWxxI8SVMMKv1aO7WiGTfplyy",
	"NuY/Ncmck5IKRcZi75C1NGbsusc3TKWhXm0dd3gOPQFvkVFMFCbw7t42/I/I9gEKq1h7LpI0tE31i1jL",
	"41XiWiLFG82WaDO8XgE/eyCmUfUDyTzEwu2F6jpmVFbdWUJTilMr5zU9pBRrFS2eyON9sSrUp88bHlzD",
	"CIu4pIw3s4X1L3obaxyHx2ja/FFLzw0b08cymPXN0sbbonPjagY3m2gkrkNMsBDBcy72dpg84i0EdsSk",
	"cklubdY360iYSFhME04Csr1Z39xG2FR3rFo+Tbh/tOVze4xVUyj7i5raEI02CcgO1pKLRZBmlYhYOcEf",
	"1R853WPNYruVJknIW3azf6icjG5s47//S7ZPAvI/v5jr/nSo+6WatPwvFcivBdmuQG5N381VBPpJvV7V",
	"cGFs+pZK18BfI9sLcxALOjc9N50gs0ZSaRRRtDeBN9MopzC8v9j2sDLJ/omrsy6mesAqyP6S6eVXG5RM",
	"0ohpJhUJXtx7EnJ8ClUnNeIKr6j2omi0TFltQarldrG7In39H5a+QFyl/rrtsVsjj+uPK6zwZr4nQ7Fy",
	"qxi8g2v3SvKveeiPebkP8NXOlvY6SFwjaDwr2ajoWf7JYle701BFy/js+HO36UOmgr9Mz/xkzuHS9GGI",
	"0JzXcd7hGL9e6FDmwnvQ2Pna29568mRjy6Nh0qEb2w+rnbfUij+e/7hm7kvgLiMuT7jufC5QKelxtTHh",
	"1n4j4Fv2aiNfbgvmx/c79JfZZmfOskPNxUdzaIHCfq5UzjGLzTrB9EtecBwpJo9mzkplSALS0ToJfD8U",
	"LRp2hNLB0/rT+tTWpLvb/TsAAP//73hdduwNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
